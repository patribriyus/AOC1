


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000         ; variables y constantes
    3 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010
    4 00000000 FFFFF014 
                       VICIntEnClr
                               EQU              0xFFFFF014
    5 00000000 FFFFF018 
                       VICSoftInt
                               EQU              0xFFFFF018
    6 00000000 FFFFF01C 
                       VICSoftIntClear
                               EQU              0xFFFFF01C
    7 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100
    8 00000000 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030
    9 00000000         
   10 00000000 E0010000 
                       TEC_DAT EQU              0xE0010000
   11 00000000         
   12 00000000 E0028004 
                       IOSET   EQU              0xE0028004
   13 00000000 E002800C 
                       IOCLR   EQU              0XE002800C
   14 00000000         
   15 00000000 00000000 
                       tecl_so DCD              0
   16 00000004 00000000 
                       reloj_so
                               DCD              0
   17 00000008         
   18 00000008 E0004000 
                       T0_IR   EQU              0xE0004000
   19 00000008 00000004 
                       IRQ_I4  EQU              4
   20 00000008 00000007 
                       IRQ_I7  EQU              7
   21 00000008         
   22 00000008 00000000 
                       reloj   DCD              0           ; contador de cente
                                                            simas de segundo 
   23 0000000C 00000008 
                       max     DCD              8           ; velocidad de mov.
                                                             caracter + (en cen
                                                            tesimas s.) 
   24 00000010 00000000 
                       cont    DCD              0           ; instante siguient
                                                            e movimiento caract
                                                            er +
   25 00000014 00      dirx    DCB              0           ; direccion mov. ca
                                                            racter + (alumno (-
                                                            1 izda,1 der.) 
   26 00000015 00      diry    DCB              0           ; direccion mov. ca
                                                            racter * (bala) (1 
                                                            abajo) 



ARM Macro Assembler    Page 2 


   27 00000016 00      fin     DCB              0
   28 00000017 00000003 
                       sem     EQU              3
   29 00000017         
   30 00000017 00 40007E00 
                       marcador
                               DCD              0x40007E00
   31 0000001C 40007E04 
                       Mpuntos DCD              0x40007E04
   32 00000020 40007E20 
                       pantup  DCD              0x40007E20  ; marcamos limites 
                                                            de pantalla
   33 00000024 40008000 
                       pantdown
                               DCD              0x40008000
   34 00000028 40008000 
                       finDer  DCD              0x40008000
   35 0000002C 40007E1F 
                       finIzq  DCD              0x40007E1F
   36 00000030         
   37 00000030 00000020 
                       espblanco
                               EQU              32          ; espacio en blanco
                                                            
   38 00000030 00000040 
                       arroba  EQU              64          ; arroba @. Ascii @
                                                             = 64
   39 00000030 0000002E 
                       puntos  EQU              46          ; puntos para sacia
                                                            r su gula.
   40 00000030 00000000 
                       contador
                               DCD              0
   41 00000034 000001DE 
                       puntosTotales
                               DCD              478         ; 16*32-2-32 puntos
                                                             que se tiene que c
                                                            omer para acabar el
                                                             programa
   42 00000038 33      contMuertes
                               DCB              51
   43 00000039 0000002A 
                       asterisco
                               EQU              42          ; Para los 4 asteri
                                                            scos. Ascii = 42
   44 00000039 00 00 00 
              40007F0F posArroba
                               DCD              0x40007F0F  ; Posicion inicial 
                                                            de la arroba.
   45 00000040 40007E20 
                       posAsterisco1
                               DCD              0x40007E20
   46 00000044 40007E50 
                       posAsterisco2
                               DCD              0x40007E50
   47 00000048 40007F65 
                       posAsterisco3
                               DCD              0x40007F65
   48 0000004C 40007FFE 



ARM Macro Assembler    Page 3 


                       posAsterisco4
                               DCD              0x40007FFE
   49 00000050 2E      quehabia1
                               DCB              46          ; un punto predeter
                                                            minado
   50 00000051 2E      quehabia2
                               DCB              46          ; un punto predeter
                                                            minado
   51 00000052 2E      quehabia3
                               DCB              46          ; un punto predeter
                                                            minado
   52 00000053 2E      quehabia4
                               DCB              46          ; un punto predeter
                                                            minado
   53 00000054         
   54 00000054                 AREA             codigo,CODE
   55 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   56 00000000                 IMPORT           srand       ; para poder invoca
                                                            r SBR srand
   57 00000000                 IMPORT           rand        ; para poder invoca
                                                            r SBR srand
   58 00000000         
   59 00000000         inicio                               ; se recomienda pon
                                                            er punto de parada 
                                                            (breakpoint) en la 
                                                            primera instruccion
                                                            
   60 00000000 E59F04E8        ldr              r0,=VICVectAddr0 ; inicializar 
                                                            rutina de interrupc
                                                            ion del timer
   61 00000004         
   62 00000004 E59F14E8        ldr              r1,=RSI_timer
   63 00000008 E3A02004        mov              r2,#IRQ_I4
   64 0000000C E7801102        str              r1,[r0,r2,LSL#2] ; programa @IR
                                                            Q4 -> RSI_timer (mo
                                                            difica el VIC de la
                                                             IRQ)
   65 00000010         
   66 00000010 E59F14E0        ldr              r1,=RSI_teclado
   67 00000014 E3A02007        mov              r2,#IRQ_I7
   68 00000018 E7801102        str              r1,[r0,r2,LSL#2] ; programa @IR
                                                            Q7 -> RSI_teclado (
                                                            modifica el VIC de 
                                                            la IRQ)
   69 0000001C         
   70 0000001C E59F04D8        ldr              r0,=VICIntEnable ; carga el reg
                                                            istro que activa in
                                                            terrupciones
   71 00000020 E5901000        ldr              r1,[r0]
   72 00000024 E3811010        orr              r1,r1,#1<<IRQ_I4 ; activa IRQ4
   73 00000028 E3811080        orr              r1,r1,#1<<IRQ_I7 ; activa IRQ7
   74 0000002C E5801000        str              r1,[r0]     ; guarda el registr
                                                            o máscara de interr
                                                            upciones modificado
                                                            
   75 00000030         
   76 00000030 E59F04C8        ldr              r0,=cont
   77 00000034 E3A01000        mov              r1,#0



ARM Macro Assembler    Page 4 


   78 00000038 E5C01000        strb             r1,[r0]     ;iniciamos el conta
                                                            dor
   79 0000003C         
   80 0000003C         ; Crea la semilla para numeros aleatorios
   81 0000003C E3A00003        mov              r0,#sem
   82 00000040 E52D0004        push             {r0}
   83 00000044 EBFFFFFE        bl               srand
   84 00000048 E49D0004        pop              {r0}
   85 0000004C         
   86 0000004C         ;inicio pantalla
   87 0000004C E51F6008        ldr              r6,marcador
   88 00000050 E51F4008        ldr              r4,pantup
   89 00000054 E51F5008        ldr              r5,pantdown ; marcamos los limi
                                                            tes de la pantalla
   90 00000058 E3A00020        mov              r0,#espblanco ; guardamos en r0
                                                             el espaco en blanc
                                                            o
   91 0000005C E1A01006        mov              r1,r6       ; copiamos r4 en r1
                                                             para no machacar l
                                                            a direccion de inic
                                                            io de la pantalla
   92 00000060         
   93 00000060         marca
   94 00000060 E4C10001        strb             r0,[r1],#1  ; pantalla en blanc
                                                            o
   95 00000064 E1510004        cmp              r1,r4
   96 00000068 1AFFFFFC        bne              marca       ; de momento usamos
                                                             los registros r4->
                                                             inicio de pantalla
                                                             y r5-> fin de pant
                                                            alla
   97 0000006C         
   98 0000006C E59F0490        ldr              r0,=contMuertes
   99 00000070 E5901000        ldr              r1,[r0]
  100 00000074 E5C61000        strb             r1,[r6]
  101 00000078 E3A0002E        mov              r0,#puntos  ; guardamos en r0 e
                                                            l espaco en blanco
  102 0000007C E1A01004        mov              r1,r4       ; copiamos r4 en r1
                                                             para no machacar l
                                                            a direccion de inic
                                                            io de la pantalla
  103 00000080         
  104 00000080         borrar
  105 00000080 E4C10001        strb             r0,[r1],#1  ; pantalla en blanc
                                                            o
  106 00000084 E1510005        cmp              r1,r5
  107 00000088 1AFFFFFC        bne              borrar      ; de momento usamos
                                                             los registros r4->
                                                             inicio de pantalla
                                                             y r5-> fin de pant
                                                            alla
  108 0000008C         
  109 0000008C         ; preparacion de los elementos en la pantalla de juego
  110 0000008C         
  111 0000008C E51F3008        ldr              r3,Mpuntos
  112 00000090 E3A02030        mov              r2,#48
  113 00000094 E5C32000        strb             r2,[r3]
  114 00000098 E5C32001        strb             r2,[r3,#1]
  115 0000009C E5C32002        strb             r2,[r3,#2]



ARM Macro Assembler    Page 5 


  116 000000A0         
  117 000000A0 E51F3008        ldr              r3,posArroba ; guardamos en r3 
                                                            la direccion de la 
                                                            arroba
  118 000000A4 E3A02040        mov              r2,#arroba
  119 000000A8 E5C32000        strb             r2,[r3]     ; posicion de la ar
                                                            roba
  120 000000AC         
  121 000000AC E51F3008        ldr              r3,posAsterisco1
  122 000000B0 E3A0202A        mov              r2,#asterisco
  123 000000B4 E5C32000        strb             r2,[r3]     ; posicion del aste
                                                            risco
  124 000000B8         
  125 000000B8 E51F3008        ldr              r3,posAsterisco2
  126 000000BC E3A0202A        mov              r2,#asterisco
  127 000000C0 E5C32000        strb             r2,[r3]     ; posicion del aste
                                                            risco
  128 000000C4         
  129 000000C4 E51F3008        ldr              r3,posAsterisco3
  130 000000C8 E3A0202A        mov              r2,#asterisco
  131 000000CC E5C32000        strb             r2,[r3]     ; posicion del aste
                                                            risco
  132 000000D0         
  133 000000D0 E51F3008        ldr              r3,posAsterisco4
  134 000000D4 E3A0202A        mov              r2,#asterisco
  135 000000D8 E5C32000        strb             r2,[r3]     ; posicion del aste
                                                            risco
  136 000000DC         
  137 000000DC         bucle
  138 000000DC E59F0424        ldr              r0,=fin
  139 000000E0 E5D00000        ldrb             r0,[r0]
  140 000000E4 E3500000        cmp              r0,#0
  141 000000E8 1A00007D        bne              final
  142 000000EC         
  143 000000EC E59F140C        ldr              r1,=cont
  144 000000F0 E5911000        ldr              r1,[r1]
  145 000000F4 E59F2410        ldr              r2,=max
  146 000000F8 E5922000        ldr              r2,[r2]
  147 000000FC E1510002        cmp              r1,r2
  148 00000100 1AFFFFF5        bne              bucle
  149 00000104         
  150 00000104 E3A09001        mov              r9,#1
  151 00000108         queasterisco
  152 00000108 E3590002        cmp              r9,#2
  153 0000010C 059F83FC        ldreq            r8,=posAsterisco2
  154 00000110 059F03FC        ldreq            r0,=quehabia2
  155 00000114 B59F83FC        ldrlt            r8,=posAsterisco1
  156 00000118 B59F03FC        ldrlt            r0,=quehabia1
  157 0000011C E3590003        cmp              r9,#3
  158 00000120 059F83F8        ldreq            r8,=posAsterisco3
  159 00000124 059F03F8        ldreq            r0,=quehabia3
  160 00000128 E3590004        cmp              r9,#4
  161 0000012C 059F83F4        ldreq            r8,=posAsterisco4
  162 00000130 059F03F4        ldreq            r0,=quehabia4
  163 00000134 CA000016        bgt              astAcabados
  164 00000138         
  165 00000138         ; PREPARACION MOVIMIENTOS ASTERISCOS
  166 00000138 E24DD004        sub              sp,sp,#4
  167 0000013C EB00006E        bl               haciadonde



ARM Macro Assembler    Page 6 


  168 00000140 E49D1004        pop{r1}
  169 00000144         
  170 00000144 E5983000        ldr              r3,[r8]
  171 00000148         
  172 00000148 E5D02000        ldrb             r2,[r0]     ; guardo en r2 el c
                                                            aracter que hay en 
                                                            la variable "quehab
                                                            ia"
  173 0000014C E352002E        cmp              r2,#puntos
  174 00000150 06C32001        strbeq           r2,[r3],r1  ; sustituyo el aste
                                                            risco por el caract
                                                            er de "quehabia"
  175 00000154 E3520020        cmp              r2,#espblanco
  176 00000158 06C32001        strbeq           r2,[r3],r1
  177 0000015C         
  178 0000015C         ; calculamos la direccion a la que va a ir
  179 0000015C E51F2008        ldr              r2,finDer
  180 00000160 E51F1008        ldr              r1,finIzq
  181 00000164 E24DD004        sub              sp,sp,#4
  182 00000168 E92D000E        PUSH{r2,r1,r3}               ; le pasamos finDer
                                                            ,finIzq,direccion e
                                                            n este orden
  183 0000016C EB000079        bl               areajuego
  184 00000170 E28DD00C        add              sp,sp,#12
  185 00000174 E49D3004        pop{r3}
  186 00000178         
  187 00000178 E5D32000        ldrb             r2,[r3]     ; guardo en r2 el c
                                                            aracter que hay en 
                                                            la direccion a la q
                                                            ue se va a mover el
                                                             asterisco
  188 0000017C E5C02000        strb             r2,[r0]     ; y guardo el carac
                                                            ter nuevo en la var
                                                            iable quehabia
  189 00000180         
  190 00000180 E3A0002A        mov              r0,#asterisco
  191 00000184 E5C30000        strb             r0,[r3]
  192 00000188 E5883000        str              r3,[r8]     ; actualiza la posi
                                                            cion del asterisco
  193 0000018C         
  194 0000018C E2899001        add              r9,#1
  195 00000190 EAFFFFDC        b                queasterisco
  196 00000194         
  197 00000194         astAcabados
  198 00000194 E3A00000        mov              r0,#0
  199 00000198 E59F1360        ldr              r1,=cont
  200 0000019C E5810000        str              r0,[r1]
  201 000001A0         
  202 000001A0 E59F1388        ldr              r1,=reloj
  203 000001A4 E5810000        str              r0,[r1]
  204 000001A8         
  205 000001A8 E59F7384        ldr              r7,=dirx
  206 000001AC E1D770D0        ldrsb            r7,[r7]
  207 000001B0         
  208 000001B0 E59F8380        ldr              r8,=posArroba
  209 000001B4 E5983000        ldr              r3,[r8]     ; guardamos en r3 l
                                                            a posicion del alum
                                                            no
  210 000001B8 E3A00020        mov              r0,#espblanco



ARM Macro Assembler    Page 7 


  211 000001BC E6C30007        strb             r0,[r3],r7  ; r3 adquiere la nu
                                                            eva posicion del al
                                                            umno
  212 000001C0         
  213 000001C0 E59F1350        ldr              r1,=posAsterisco1
  214 000001C4         
  215 000001C4 E3A09001        mov              r9,#1
  216 000001C8         estamuerto
  217 000001C8 E3590002        cmp              r9,#2
  218 000001CC 059F133C        ldreq            r1,=posAsterisco2
  219 000001D0 B59F1340        ldrlt            r1,=posAsterisco1
  220 000001D4 E3590003        cmp              r9,#3
  221 000001D8 059F1340        ldreq            r1,=posAsterisco3
  222 000001DC E3590004        cmp              r9,#4
  223 000001E0 059F1340        ldreq            r1,=posAsterisco4
  224 000001E4 CA000013        bgt              muerteAcabada
  225 000001E8         ; empieza
  226 000001E8 E5911000        ldr              r1,[r1]
  227 000001EC E1510003        cmp              r1,r3       ; comparamos las di
                                                            recciones de arroba
                                                             y el asterisco par
                                                            a ver si se han cho
                                                            cado
  228 000001F0 1A00000E        bne              nomuerto
  229 000001F4         
  230 000001F4 E59F0308        ldr              r0,=contMuertes
  231 000001F8 E5D01000        ldrb             r1,[r0]
  232 000001FC E2411001        sub              r1,r1,#1
  233 00000200 E5C01000        strb             r1,[r0]
  234 00000204 E51F2008        ldr              r2,marcador
  235 00000208 E5C21000        strb             r1,[r2]
  236 0000020C E3510030        cmp              r1,#48
  237 00000210 059F12F0        ldreq            r1,=fin
  238 00000214 03A00001        moveq            r0,#1
  239 00000218 05C10000        strbeq           r0,[r1]
  240 0000021C         
  241 0000021C E3A00020        mov              r0,#espblanco ; guardamos en r0
                                                             el espaco en blanc
                                                            o
  242 00000220         borrarp
  243 00000220 E4C10001        strb             r0,[r1],#1  ; pantalla en blanc
                                                            o
  244 00000224 E1510005        cmp              r1,r5
  245 00000228 1AFFFFFC        bne              borrarp     ; de momento usamos
                                                             los registros r4->
                                                             inicio de pantalla
                                                             y r5-> fin de pant
                                                            alla
  246 0000022C         gameover
  247 0000022C E3A00001        mov              r0,#1
  248 00000230         
  249 00000230         nomuerto
  250 00000230 E2899001        add              r9,#1
  251 00000234 EAFFFFE3        b                estamuerto
  252 00000238         
  253 00000238         muerteAcabada
  254 00000238 E51F0008        ldr              r0,finDer
  255 0000023C E51F1008        ldr              r1,finIzq
  256 00000240 E24DD004        sub              sp,sp,#4



ARM Macro Assembler    Page 8 


  257 00000244 E92D000B        PUSH{r0,r1,r3}               ; le pasamos finDer
                                                            ,finIzq,direccion e
                                                            n este orden
  258 00000248 EB000042        bl               areajuego
  259 0000024C E28DD00C        add              sp,sp,#12
  260 00000250 E49D3004        pop{r3}
  261 00000254         
  262 00000254         ; el siguiente codigo es para que cuando el arroba se ha
                       ya comido todos los puntos el juego termine
  263 00000254 E3570000        cmp              r7,#0
  264 00000258 0A00001A        beq              nada
  265 0000025C E5D30000        ldrb             r0,[r3]     ; guardamos en r0 e
                                                            l caracter que hay 
                                                            en la direccion a l
                                                            a que se dirige "@"
                                                            
  266 00000260 E3500020        cmp              r0,#espblanco
  267 00000264 0A000017        beq              nada
  268 00000268         
  269 00000268         ; MARCADOR DE PUNTOS
  270 00000268         ; obtenemos el valor en ascii de centenas, decenas y uni
                       dades
  271 00000268 E51F4008        ldr              r4,Mpuntos
  272 0000026C E5D40000        ldrb             r0,[r4]     ; centenas
  273 00000270 E5D41001        ldrb             r1,[r4,#1]  ; decenas
  274 00000274 E5D42002        ldrb             r2,[r4,#2]  ; unidades
  275 00000278         
  276 00000278 E2822001        add              r2,#1
  277 0000027C E3520039        cmp              r2,#57
  278 00000280 C3A02030        movgt            r2,#48
  279 00000284 C2811001        addgt            r1,#1
  280 00000288 E3510039        cmp              r1,#57
  281 0000028C C3A01030        movgt            r1,#48
  282 00000290 C2800001        addgt            r0,#1
  283 00000294         
  284 00000294 E5C40000        strb             r0,[r4]
  285 00000298 E5C41001        strb             r1,[r4,#1]
  286 0000029C E5C42002        strb             r2,[r4,#2]
  287 000002A0         
  288 000002A0 E59F0294        ldr              r0,=contador
  289 000002A4 E5901000        ldr              r1,[r0]     ; guardamos el valo
                                                            r de contador en r1
                                                            
  290 000002A8 E51F4008        ldr              r4,puntosTotales
  291 000002AC E1510004        cmp              r1,r4
  292 000002B0 12811001        addne            r1,#1
  293 000002B4 15801000        strne            r1,[r0]
  294 000002B8         
  295 000002B8 E1510004        cmp              r1,r4
  296 000002BC 059F0244        ldreq            r0,=fin
  297 000002C0 03A01001        moveq            r1,#1
  298 000002C4 05C01000        strbeq           r1,[r0]
  299 000002C8         
  300 000002C8         nada
  301 000002C8 E3A00040        mov              r0,#arroba
  302 000002CC E5C30000        strb             r0,[r3]
  303 000002D0 E5883000        str              r3,[r8]
  304 000002D4         
  305 000002D4 E59F7258        ldr              r7,=dirx    ; poner al final



ARM Macro Assembler    Page 9 


  306 000002D8 E3A00000        mov              r0,#0
  307 000002DC E5C70000        strb             r0,[r7]     ; volvemos a inicia
                                                            lizar el eje de x a
                                                             0
  308 000002E0         
  309 000002E0 EAFFFF7D        b                bucle
  310 000002E4         
  311 000002E4         final
  312 000002E4         ; desactivar IRQ4,IRQ7
  313 000002E4 E59F0254        ldr              r0,=VICIntEnClr
  314 000002E8 E5901000        ldr              r1,[r0]
  315 000002EC E3811010        orr              r1,r1,#1<<IRQ_I4
  316 000002F0 E3811080        orr              r1,r1,#1<<IRQ_I7
  317 000002F4 E5801000        str              r1,[r0]
  318 000002F8         
  319 000002F8 EAFFFFFE 
                       bfin    b                bfin
  320 000002FC         
  321 000002FC         haciadonde
  322 000002FC E92D4800        PUSH{fp,lr}
  323 00000300 E1A0B00D        mov              fp,sp
  324 00000304 E92D0003        PUSH{r0,r1}
  325 00000308 E24DD004        sub              sp,sp,#4
  326 0000030C EBFFFFFE        bl               rand        ; si el primer bit 
                                                            es uno, ira a la de
                                                            recha, sino a la iz
                                                            quierda
  327 00000310 E49D0004        pop{r0}
  328 00000314 E2000080        and              r0,r0,#2_10000000
  329 00000318         
  330 00000318 E24DD004        sub              sp,sp,#4
  331 0000031C EBFFFFFE        bl               rand        ; si el primer bit 
                                                            es uno, ira a la de
                                                            recha, sino a la iz
                                                            quierda
  332 00000320 E49D1004        pop{r1}
  333 00000324 E2011080        and              r1,r1,#2_10000000
  334 00000328         
  335 00000328 E3500000        cmp              r0,#0
  336 0000032C 1A000003        bne              ejex
  337 00000330         ; si es igual se movera en el eje y
  338 00000330 E3510000        cmp              r1,#0
  339 00000334 03E0101F        moveq            r1,#-32     ; se movera hacia a
                                                            rriba
  340 00000338 13A01020        movne            r1,#32      ; se movera hacia a
                                                            bajo
  341 0000033C         
  342 0000033C EA000002        b                sehamovido
  343 00000340         
  344 00000340         ; si es distinto se movera en el eje x
  345 00000340         ejex
  346 00000340 E3510000        cmp              r1,#0
  347 00000344 03E01000        moveq            r1,#-1      ; se movera hacia l
                                                            a izquierda
  348 00000348 13A01001        movne            r1,#1       ; se movera hacia l
                                                            a derecha
  349 0000034C         
  350 0000034C         sehamovido
  351 0000034C E58B1008        str              r1,[fp,#8]



ARM Macro Assembler    Page 10 


  352 00000350 E8BD0003        pop{r0,r1}
  353 00000354 E8BD8800        pop{fp,pc}
  354 00000358         ; ACABA LA SUBRUTINA
  355 00000358         
  356 00000358         areajuego                            ; SUBRUTINA
  357 00000358 E92D4800        PUSH{fp,lr}
  358 0000035C E1A0B00D        mov              fp,sp
  359 00000360 E92D001C        PUSH{r2,r3,r4}
  360 00000364 E59B3010        ldr              r3,[fp,#16] ; r3 guarda el valo
                                                            r de la direccion a
                                                             la que se va a dir
                                                            igir
  361 00000368 E1A04003        mov              r4,r3
  362 0000036C         
  363 0000036C E59B2008        ldr              r2,[fp,#8]  ; r2 guarda el valo
                                                            r de finDer
  364 00000370 E1520004        cmp              r2,r4       ; compara si ha lle
                                                            gado al final de la
                                                             derecha
  365 00000374 02433020        subeq            r3,#32
  366 00000378 B3A0200F        movlt            r2,#15
  367 0000037C B0433282        sublt            r3,r3,r2,LSL#5
  368 00000380         
  369 00000380 E59B200C        ldr              r2,[fp,#12] ; r2 guarda el valo
                                                            r de finIzq
  370 00000384 E1520004        cmp              r2,r4       ; compara si ha lle
                                                            gado al final de la
                                                             derecha
  371 00000388 02833020        addeq            r3,#32
  372 0000038C C3A0200F        movgt            r2,#15
  373 00000390 C0833282        addgt            r3,r3,r2,LSL#5
  374 00000394         
  375 00000394 E58B3014        str              r3,[fp,#20]
  376 00000398 E8BD001C        pop{r2,r3,r4}
  377 0000039C E8BD8800        pop{fp,pc}
  378 000003A0         ; ACABA LA SUBRUTINA
  379 000003A0         
  380 000003A0         movimiento
  381 000003A0 E3500041        cmp              r0,#65      ; r0 -?-> A
  382 000003A4 059F0188        ldreq            r0,=dirx
  383 000003A8 03E01000        moveq            r1,#-1
  384 000003AC 05C01000        strbeq           r1,[r0]     ; se mueve a la izq
                                                            uierda
  385 000003B0 0A000047        beq              fintec
  386 000003B4         
  387 000003B4 E3500044        cmp              r0,#68      ; r0 -?-> D
  388 000003B8 059F0174        ldreq            r0,=dirx
  389 000003BC 03A01001        moveq            r1, #1
  390 000003C0 05C01000        strbeq           r1,[r0]     ; se mueve a la der
                                                            echa
  391 000003C4 0A000042        beq              fintec
  392 000003C8         
  393 000003C8 E3500053        cmp              r0,#83      ; r0 -?-> S
  394 000003CC 059F0160        ldreq            r0,=dirx
  395 000003D0 03A01020        moveq            r1,#32
  396 000003D4 05C01000        strbeq           r1,[r0]     ; se mueve hacia ab
                                                            ajo
  397 000003D8 0A00003D        beq              fintec
  398 000003DC         



ARM Macro Assembler    Page 11 


  399 000003DC E3500057        cmp              r0,#87      ; r0 -?-> W
  400 000003E0 059F014C        ldreq            r0,=dirx
  401 000003E4 03E0101F        moveq            r1,#-32
  402 000003E8 05C01000        strbeq           r1,[r0]     ; se mueve hacia ar
                                                            riba
  403 000003EC 0A000038        beq              fintec
  404 000003F0         
  405 000003F0 E350000B        cmp              r0,#11      ; r0 -?-> +
  406 000003F4 0A000002        beq              sumarmax    ; aumenta la veloci
                                                            dad
  407 000003F8         
  408 000003F8 E350000D        cmp              r0,#13      ; r0 -?-> -
  409 000003FC 0A000007        beq              restarmax   ; reduce la velocid
                                                            ad
  410 00000400         
  411 00000400 EA000033        b                fintec
  412 00000404         
  413 00000404         sumarmax
  414 00000404 E59F0100        ldr              r0,=max
  415 00000408 E5901000        ldr              r1,[r0]
  416 0000040C E2411001        sub              r1,#1
  417 00000410 E3510000        cmp              r1,#0
  418 00000414 02811001        addeq            r1,#1
  419 00000418 E5801000        str              r1,[r0]
  420 0000041C EA00002C        b                fintec
  421 00000420         
  422 00000420         restarmax
  423 00000420 E59F00E4        ldr              r0,=max
  424 00000424 E5901000        ldr              r1,[r0]
  425 00000428 E2811001        add              r1,#1
  426 0000042C E3510C01        cmp              r1,#256
  427 00000430 02411001        subeq            r1,#1
  428 00000434 E5801000        str              r1,[r0]
  429 00000438 EA000025        b                fintec
  430 0000043C         
  431 0000043C         RSI_timer
  432 0000043C E24EE004        sub              lr, lr, #4
  433 00000440 E52DE004        push{lr}                     ; Activo IRQs
  434 00000444 E14FE000        mrs              r14, spsr
  435 00000448 E52DE004        push{r14}
  436 0000044C E92D0003        push             {r0-r1}     ; apila registros a
                                                             utilizar
  437 00000450 E321F052        msr              cpsr_c,#2_01010010 ; habilita I
                                                            RQ de la palabra de
                                                             estado
  438 00000454         
  439 00000454 E59F00A4        ldr              r0,=cont
  440 00000458 E5901000        ldr              r1,[r0]
  441 0000045C E2811001        add              r1,#1
  442 00000460 E5801000        str              r1,[r0]
  443 00000464         
  444 00000464         ; desactiva del VIC la peticion
  445 00000464 E59F00D8        LDR              r0,=T0_IR   ;
  446 00000468 E3A01001        mov              r1,#1
  447 0000046C E5801000        str              r1,[r0]
  448 00000470         
  449 00000470 E59F00B8        ldr              r0,=reloj
  450 00000474 E5901000        ldr              r1,[r0]
  451 00000478 E2811001        add              r1, r1, #1



ARM Macro Assembler    Page 12 


  452 0000047C E5801000        str              r1, [r0]
  453 00000480         
  454 00000480         ;desactiva IRQ
  455 00000480 E321F0D2        msr              cpsr_c,#2_11010010
  456 00000484 E8BD0003        POP{r0-r1}
  457 00000488 E49DE004        POP{r14}
  458 0000048C E16FF00E        msr              spsr_fsxc,r14
  459 00000490 E59FE0B0        LDR              r14,=VICVectAddr
  460 00000494 E58EE000        str              r14,[r14]
  461 00000498 E8FD8000        POP              {pc}^
  462 0000049C         
  463 0000049C         RSI_teclado
  464 0000049C E24EE004        sub              lr,lr,#4
  465 000004A0 E52DE004        push{lr}
  466 000004A4 E14FE000        mrs              r14,spsr    ; activo IRQs
  467 000004A8 E52DE004        push{r14}
  468 000004AC E321F052        msr              cpsr_c,#2_01010010
  469 000004B0 E92D0007        PUSH{r0-r2}
  470 000004B4         
  471 000004B4 E59F1090        LDR              r1,=TEC_DAT
  472 000004B8 E5D10000        ldrb             r0,[r1]     ; r0=codigo ASCII t
                                                            ecla
  473 000004BC         
  474 000004BC E3C00020        bic              r0,r0,#2_100000 ; transformo la
                                                             tecla a mayuscula
  475 000004C0 E3500051        cmp              r0,#81      ; comparo con la le
                                                            tra 'Q' (finaliza e
                                                            l programa)
  476 000004C4 1AFFFFB5        bne              movimiento
  477 000004C8         
  478 000004C8 E59F1038        ldr              r1,=fin
  479 000004CC E3A00001        mov              r0,#1
  480 000004D0 E5C10000        strb             r0,[r1]
  481 000004D4         
  482 000004D4         fintec
  483 000004D4 E8BD0007        POP{r0-r2}
  484 000004D8 E321F0D2        msr              cpsr_c,#2_11010010
  485 000004DC E49DE004        POP{r14}
  486 000004E0 E16FF00E        msr              spsr_fsxc,r14
  487 000004E4 E59FE05C        LDR              r14,=VICVectAddr
  488 000004E8 E58EE000        str              r14,[r14]
  489 000004EC E8FD8000        POP{PC}^
  490 000004F0         
  491 000004F0                 END
              FFFFF100 
              00000000 
              00000000 
              FFFFF010 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 13 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF014 
              E0004000 
              FFFFF030 
              E0010000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
tra.d -o.\otra.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\
Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__UVISION_VERS
ION SETA 514" --list=.\otra.lst otra.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Mpuntos 0000001C

Symbol: Mpuntos
   Definitions
      At line 31 in file otra.s
   Uses
      At line 111 in file otra.s
      At line 271 in file otra.s

cont 00000010

Symbol: cont
   Definitions
      At line 24 in file otra.s
   Uses
      At line 76 in file otra.s
      At line 143 in file otra.s
      At line 199 in file otra.s
      At line 439 in file otra.s

contMuertes 00000038

Symbol: contMuertes
   Definitions
      At line 42 in file otra.s
   Uses
      At line 98 in file otra.s
      At line 230 in file otra.s

contador 00000030

Symbol: contador
   Definitions
      At line 40 in file otra.s
   Uses
      At line 288 in file otra.s
Comment: contador used once
datos 00000000

Symbol: datos
   Definitions
      At line 1 in file otra.s
   Uses
      None
Comment: datos unused
dirx 00000014

Symbol: dirx
   Definitions
      At line 25 in file otra.s
   Uses
      At line 205 in file otra.s
      At line 305 in file otra.s
      At line 382 in file otra.s
      At line 388 in file otra.s
      At line 394 in file otra.s
      At line 400 in file otra.s

diry 00000015



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: diry
   Definitions
      At line 26 in file otra.s
   Uses
      None
Comment: diry unused
fin 00000016

Symbol: fin
   Definitions
      At line 27 in file otra.s
   Uses
      At line 138 in file otra.s
      At line 237 in file otra.s
      At line 296 in file otra.s
      At line 478 in file otra.s

finDer 00000028

Symbol: finDer
   Definitions
      At line 34 in file otra.s
   Uses
      At line 179 in file otra.s
      At line 254 in file otra.s

finIzq 0000002C

Symbol: finIzq
   Definitions
      At line 35 in file otra.s
   Uses
      At line 180 in file otra.s
      At line 255 in file otra.s

marcador 00000018

Symbol: marcador
   Definitions
      At line 30 in file otra.s
   Uses
      At line 87 in file otra.s
      At line 234 in file otra.s

max 0000000C

Symbol: max
   Definitions
      At line 23 in file otra.s
   Uses
      At line 145 in file otra.s
      At line 414 in file otra.s
      At line 423 in file otra.s

pantdown 00000024

Symbol: pantdown
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 33 in file otra.s
   Uses
      At line 89 in file otra.s
Comment: pantdown used once
pantup 00000020

Symbol: pantup
   Definitions
      At line 32 in file otra.s
   Uses
      At line 88 in file otra.s
Comment: pantup used once
posArroba 0000003C

Symbol: posArroba
   Definitions
      At line 44 in file otra.s
   Uses
      At line 117 in file otra.s
      At line 208 in file otra.s

posAsterisco1 00000040

Symbol: posAsterisco1
   Definitions
      At line 45 in file otra.s
   Uses
      At line 121 in file otra.s
      At line 155 in file otra.s
      At line 213 in file otra.s
      At line 219 in file otra.s

posAsterisco2 00000044

Symbol: posAsterisco2
   Definitions
      At line 46 in file otra.s
   Uses
      At line 125 in file otra.s
      At line 153 in file otra.s
      At line 218 in file otra.s

posAsterisco3 00000048

Symbol: posAsterisco3
   Definitions
      At line 47 in file otra.s
   Uses
      At line 129 in file otra.s
      At line 158 in file otra.s
      At line 221 in file otra.s

posAsterisco4 0000004C

Symbol: posAsterisco4
   Definitions
      At line 48 in file otra.s
   Uses
      At line 133 in file otra.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 161 in file otra.s
      At line 223 in file otra.s

puntosTotales 00000034

Symbol: puntosTotales
   Definitions
      At line 41 in file otra.s
   Uses
      At line 290 in file otra.s
Comment: puntosTotales used once
quehabia1 00000050

Symbol: quehabia1
   Definitions
      At line 49 in file otra.s
   Uses
      At line 156 in file otra.s
Comment: quehabia1 used once
quehabia2 00000051

Symbol: quehabia2
   Definitions
      At line 50 in file otra.s
   Uses
      At line 154 in file otra.s
Comment: quehabia2 used once
quehabia3 00000052

Symbol: quehabia3
   Definitions
      At line 51 in file otra.s
   Uses
      At line 159 in file otra.s
Comment: quehabia3 used once
quehabia4 00000053

Symbol: quehabia4
   Definitions
      At line 52 in file otra.s
   Uses
      At line 162 in file otra.s
Comment: quehabia4 used once
reloj 00000008

Symbol: reloj
   Definitions
      At line 22 in file otra.s
   Uses
      At line 202 in file otra.s
      At line 449 in file otra.s

reloj_so 00000004

Symbol: reloj_so
   Definitions
      At line 16 in file otra.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: reloj_so unused
tecl_so 00000000

Symbol: tecl_so
   Definitions
      At line 15 in file otra.s
   Uses
      None
Comment: tecl_so unused
27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RSI_teclado 0000049C

Symbol: RSI_teclado
   Definitions
      At line 463 in file otra.s
   Uses
      At line 66 in file otra.s
Comment: RSI_teclado used once
RSI_timer 0000043C

Symbol: RSI_timer
   Definitions
      At line 431 in file otra.s
   Uses
      At line 62 in file otra.s
Comment: RSI_timer used once
areajuego 00000358

Symbol: areajuego
   Definitions
      At line 356 in file otra.s
   Uses
      At line 183 in file otra.s
      At line 258 in file otra.s

astAcabados 00000194

Symbol: astAcabados
   Definitions
      At line 197 in file otra.s
   Uses
      At line 163 in file otra.s
Comment: astAcabados used once
bfin 000002F8

Symbol: bfin
   Definitions
      At line 319 in file otra.s
   Uses
      At line 319 in file otra.s
Comment: bfin used once
borrar 00000080

Symbol: borrar
   Definitions
      At line 104 in file otra.s
   Uses
      At line 107 in file otra.s
Comment: borrar used once
borrarp 00000220

Symbol: borrarp
   Definitions
      At line 242 in file otra.s
   Uses
      At line 245 in file otra.s
Comment: borrarp used once
bucle 000000DC




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: bucle
   Definitions
      At line 137 in file otra.s
   Uses
      At line 148 in file otra.s
      At line 309 in file otra.s

codigo 00000000

Symbol: codigo
   Definitions
      At line 54 in file otra.s
   Uses
      None
Comment: codigo unused
ejex 00000340

Symbol: ejex
   Definitions
      At line 345 in file otra.s
   Uses
      At line 336 in file otra.s
Comment: ejex used once
estamuerto 000001C8

Symbol: estamuerto
   Definitions
      At line 216 in file otra.s
   Uses
      At line 251 in file otra.s
Comment: estamuerto used once
final 000002E4

Symbol: final
   Definitions
      At line 311 in file otra.s
   Uses
      At line 141 in file otra.s
Comment: final used once
fintec 000004D4

Symbol: fintec
   Definitions
      At line 482 in file otra.s
   Uses
      At line 385 in file otra.s
      At line 391 in file otra.s
      At line 397 in file otra.s
      At line 403 in file otra.s
      At line 411 in file otra.s
      At line 420 in file otra.s
      At line 429 in file otra.s

gameover 0000022C

Symbol: gameover
   Definitions
      At line 246 in file otra.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: gameover unused
haciadonde 000002FC

Symbol: haciadonde
   Definitions
      At line 321 in file otra.s
   Uses
      At line 167 in file otra.s
Comment: haciadonde used once
inicio 00000000

Symbol: inicio
   Definitions
      At line 59 in file otra.s
   Uses
      At line 55 in file otra.s
Comment: inicio used once
marca 00000060

Symbol: marca
   Definitions
      At line 93 in file otra.s
   Uses
      At line 96 in file otra.s
Comment: marca used once
movimiento 000003A0

Symbol: movimiento
   Definitions
      At line 380 in file otra.s
   Uses
      At line 476 in file otra.s
Comment: movimiento used once
muerteAcabada 00000238

Symbol: muerteAcabada
   Definitions
      At line 253 in file otra.s
   Uses
      At line 224 in file otra.s
Comment: muerteAcabada used once
nada 000002C8

Symbol: nada
   Definitions
      At line 300 in file otra.s
   Uses
      At line 264 in file otra.s
      At line 267 in file otra.s

nomuerto 00000230

Symbol: nomuerto
   Definitions
      At line 249 in file otra.s
   Uses
      At line 228 in file otra.s
Comment: nomuerto used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

queasterisco 00000108

Symbol: queasterisco
   Definitions
      At line 151 in file otra.s
   Uses
      At line 195 in file otra.s
Comment: queasterisco used once
restarmax 00000420

Symbol: restarmax
   Definitions
      At line 422 in file otra.s
   Uses
      At line 409 in file otra.s
Comment: restarmax used once
sehamovido 0000034C

Symbol: sehamovido
   Definitions
      At line 350 in file otra.s
   Uses
      At line 342 in file otra.s
Comment: sehamovido used once
sumarmax 00000404

Symbol: sumarmax
   Definitions
      At line 413 in file otra.s
   Uses
      At line 406 in file otra.s
Comment: sumarmax used once
25 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IOCLR E002800C

Symbol: IOCLR
   Definitions
      At line 13 in file otra.s
   Uses
      None
Comment: IOCLR unused
IOSET E0028004

Symbol: IOSET
   Definitions
      At line 12 in file otra.s
   Uses
      None
Comment: IOSET unused
IRQ_I4 00000004

Symbol: IRQ_I4
   Definitions
      At line 19 in file otra.s
   Uses
      At line 63 in file otra.s
      At line 72 in file otra.s
      At line 315 in file otra.s

IRQ_I7 00000007

Symbol: IRQ_I7
   Definitions
      At line 20 in file otra.s
   Uses
      At line 67 in file otra.s
      At line 73 in file otra.s
      At line 316 in file otra.s

T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 18 in file otra.s
   Uses
      At line 445 in file otra.s
Comment: T0_IR used once
TEC_DAT E0010000

Symbol: TEC_DAT
   Definitions
      At line 10 in file otra.s
   Uses
      At line 471 in file otra.s
Comment: TEC_DAT used once
VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 4 in file otra.s
   Uses
      At line 313 in file otra.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 3 in file otra.s
   Uses
      At line 70 in file otra.s
Comment: VICIntEnable used once
VICSoftInt FFFFF018

Symbol: VICSoftInt
   Definitions
      At line 5 in file otra.s
   Uses
      None
Comment: VICSoftInt unused
VICSoftIntClear FFFFF01C

Symbol: VICSoftIntClear
   Definitions
      At line 6 in file otra.s
   Uses
      None
Comment: VICSoftIntClear unused
VICVectAddr FFFFF030

Symbol: VICVectAddr
   Definitions
      At line 8 in file otra.s
   Uses
      At line 459 in file otra.s
      At line 487 in file otra.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 7 in file otra.s
   Uses
      At line 60 in file otra.s
Comment: VICVectAddr0 used once
arroba 00000040

Symbol: arroba
   Definitions
      At line 38 in file otra.s
   Uses
      At line 118 in file otra.s
      At line 301 in file otra.s

asterisco 0000002A

Symbol: asterisco
   Definitions
      At line 43 in file otra.s
   Uses
      At line 122 in file otra.s
      At line 126 in file otra.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 130 in file otra.s
      At line 134 in file otra.s
      At line 190 in file otra.s

espblanco 00000020

Symbol: espblanco
   Definitions
      At line 37 in file otra.s
   Uses
      At line 90 in file otra.s
      At line 175 in file otra.s
      At line 210 in file otra.s
      At line 241 in file otra.s
      At line 266 in file otra.s

puntos 0000002E

Symbol: puntos
   Definitions
      At line 39 in file otra.s
   Uses
      At line 101 in file otra.s
      At line 173 in file otra.s

sem 00000003

Symbol: sem
   Definitions
      At line 28 in file otra.s
   Uses
      At line 81 in file otra.s
Comment: sem used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rand 00000000

Symbol: rand
   Definitions
      At line 57 in file otra.s
   Uses
      At line 326 in file otra.s
      At line 331 in file otra.s

srand 00000000

Symbol: srand
   Definitions
      At line 56 in file otra.s
   Uses
      At line 83 in file otra.s
Comment: srand used once
2 symbols
405 symbols in table
